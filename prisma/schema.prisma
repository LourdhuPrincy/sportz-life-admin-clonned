// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String? @db.Text
  oauth_token              String? @db.Text

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Coach {
  id            Int            @unique @default(autoincrement())
  name          String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  contactNumber String
  email         String         @unique
  designation   String
  gender        Gender
  payroll       Payroll?
  sports        Sports?
  certificates  Certificates[]
  Center        Center?        @relation(fields: [centerId], references: [id])
  centerId      Int?
  image         Bytes?

  @@index([centerId])
}

model Staff {
  id            Int      @unique @default(autoincrement())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  contactNumber String
  email         String   @unique
  designation   String
  gender        Gender
  center        Center[]
  image         Bytes?
  payroll       Payroll? @relation(fields: [payrollId], references: [id])
  shift         Shift[]
  payrollId     Int?

  @@index([payrollId])
}

model Shift {
  id      Int    @unique @default(autoincrement())
  shift   String
  Staff   Staff? @relation(fields: [staffId], references: [id])
  staffId Int?

  @@index([staffId])
}

model Inventory {
  id       Int     @unique @default(autoincrement())
  name     String
  quantity Int
  Center   Center? @relation(fields: [centerId], references: [id])
  centerId Int?

  @@index([centerId])
}

model Payroll {
  id        Int     @unique @default(autoincrement())
  coach     Coach   @relation(fields: [payrollId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  payrollId Int     @unique
  type      String
  Staff     Staff[]
}

model Sports {
  id       Int     @unique @default(autoincrement())
  name     String
  coach    Coach   @relation(fields: [sportId], references: [id])
  sportId  Int     @unique
  Center   Center? @relation(fields: [centerId], references: [id])
  centerId Int?

  @@index([centerId])
}

model Certificates {
  id            Int      @unique @default(autoincrement())
  name          String
  startEnd      DateTime
  endDate       DateTime
  coach         Coach    @relation(fields: [certificateId], references: [id])
  certificateId Int      @unique
}

model Center {
  id            Int         @unique @default(autoincrement())
  location      String
  contactNumber String
  phoneNumber   String
  sports        Sports[]
  coach         Coach[]
  image         Bytes?
  inventory     Inventory[]
  Staff         Staff?      @relation(fields: [staffId], references: [id])
  staffId       Int?

  @@index([staffId])
}

model Batches {
  id   Int    @unique @default(autoincrement())
  name String
}

enum Gender {
  MALE
  FEMALE
}
